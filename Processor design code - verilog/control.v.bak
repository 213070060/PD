module control (instr,clk,ctrl);
    input [15:0] instr;
    input clk;
    output reg [9:0] ctrl;
    output reg [ 2:0] sa,sb,dest;

    reg [9:0] instr_buffer [1:4];
    reg [9:0] control;
    reg [ 3:0] opcode;
    reg [ 2:0] ra,rb,rc;
    reg [ 2:0] condition;
    reg [ 1:0] alu_b;
    reg [ 2:0] alu_op;
    reg rf_write_en,mem_read,mem_write,mem_or_alu,ex_pass;
    


    assign opcode = instr[15:12];
    assign ra = instr[11:9];
    assign rb = instr[ 8:6];
    assign rc = instr[ 5:3];
    assign condition = instr[1:0];
    assign control = {alu_b,alu_op,rf_write_en,mem_read,mem_write,mem_or_alu,ex_pass};
    //                 9 8  7 6 5       4         3         2        1          0        
    assign ctrl = {instr_buffer[2][10:9],instr_buffer[2][7:5],instr_buffer[10:9],instr_buffer[10:9],instr_buffer[10:9],instr_buffer[10:9],instr_buffer[10:9],};
    always@(posedge clk) begin
        case()
    end

    always@(posedge clk) begin
        instr_buffer[4] = instr_buffer[3];  // Write Back
        instr_buffer[3] = instr_buffer[2];  // Memory Access
        instr_buffer[2] = instr_buffer[1];  // Execution
        instr_buffer[1] = control;          // Register read
    end
    
    always@(posedge clk) begin
        case({opcode,condition})
        4'b0000xx: begin        // ADI
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b011;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rb;
        end
        4'b000100: begin        // ADD
            alu_b = 2'b01;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b011;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rc;
        end
        4'b000101: begin        // ADZ
            alu_b = 2'b01;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b011;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rc;
        end
        4'b000110: begin        // ADC
            alu_b = 2'b01;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b011;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rc;
        end
        4'b000111: begin        // ADL
            alu_b = 2'b00;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b011;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rc;
        end
        4'b001000: begin        // NDU
            alu_b = 2'b01;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b101;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rc;
        end
        4'b001010: begin        // NDC
            alu_b = 2'b01;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b101;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rc;
        end
        4'b001001: begin        // NDZ
            alu_b = 2'b01;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b101;
            ex_pass = 1'b0;
            sa = ra;
            sb = rb;
            dest = rc;
        end
        4'b0011xx: begin        // LHI
            alu_b = 2'b00;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b1;
            alu_op = 3'b000;
            ex_pass = 1'b1;
            sa = ra;
            sb = rb;
            dest = ra;
        end
        4'b0100xx: begin        // LW
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b1;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 3'b001;
            ex_pass = 1'b0;
            sa = rb;
            sb = rb;
            dest = ra;
        end
        4'b0101xx: begin        // SW
            alu_b = 2'b10;
            rf_write_en = 1'b0;
            mem_read = 1'b0;
            mem_write = 1'b1;
            mem_or_alu = 1'b0;
            alu_op = 3'b000;
            ex_pass = 1'b0;
            sa = rb;
            sb = ra;
            dest = ra;
        end
        4'b0110xx: begin        // NOT HERE        
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b0111xx: begin        // NOT HERE 
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b1000xx: begin        // BEQ
            alu_b = 2'b10;
            rf_write_en = 1'b0;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
            
        end
        4'b1001xx: begin        // JAL
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b1010xx: begin        // JLR
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b1011xx: begin        // JRI
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b1100xx: begin        // LM
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b1101xx: begin        // SM
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b1110xx: begin        // LA
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        4'b1111xx: begin        // SA
            alu_b = 2'b10;
            rf_write_en = 1'b1;
            mem_read = 1'b0;
            mem_write = 1'b0;
            mem_or_alu = 1'b0;
            alu_op = 1'b0;
        end
        endcase
    end
endmodule